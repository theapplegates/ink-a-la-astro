import { c as createComponent, r as renderTemplate, d as renderComponent, m as maybeRenderHead, e as renderSlot, f as createAstro } from '../../chunks/astro/server_Dp6SZoyW.mjs';
import 'kleur/colors';
import { g as getEntryBySlug, a as getCollection } from '../../chunks/_astro_content_Dx4uqgM2.mjs';
import { $ as $$Post } from '../../chunks/post_BMi_l3Hu.mjs';
import { c as create_ssr_component, a as add_styles, m as merge_ssr_styles, b as add_attribute } from '../../chunks/index_Ctj3Se_6.mjs';
export { renderers } from '../../renderers.mjs';

/* src/components/CodeCopy.svelte generated by Svelte v4.2.8 */

const CodeCopy = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	const COPIED_TIMEOUT = 2 * 1e3;
	let { stayCopied = COPIED_TIMEOUT } = $$props;
	let selfElm;

	if ($$props.stayCopied === void 0 && $$bindings.stayCopied && stayCopied !== void 0) $$bindings.stayCopied(stayCopied);

	return `<button class="absolute px-2 text-theme-primary dark:text-theme-dark-primary border-1 rounded-lg"${add_styles(merge_ssr_styles("top: 6px; right: 8px;", {
		"display": 'inline-block' 
	}))} ${""}${add_attribute("this", selfElm, 0)}>${`<span data-svelte-h="svelte-166m88g">Copy</span>`}</button>`;
});

const $$Code = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate`${renderComponent($$result, "CodeCopy", CodeCopy, { "client:load": true, "client:component-hydration": "load", "client:component-path": "/Users/thor3/Documents/kill-me-ink/src/components/CodeCopy.svelte", "client:component-export": "default" })} ${maybeRenderHead()}<code class="astro-ink__code"> ${renderSlot($$result, $$slots["default"])} </code>`;
}, "/Users/thor3/Documents/kill-me-ink/src/components/Code.astro", void 0);

const $$Astro = createAstro("https://ink.paulapplegate.com");
const prerender = true;
async function getStaticPaths() {
  const allPosts = await getCollection("blog");
  return allPosts.map((post) => ({
    params: {
      slug: post.slug
    }
  }));
}
const $$slug = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$slug;
  const { slug } = Astro2.params;
  const entry = await getEntryBySlug("blog", slug);
  const { id, collection, data } = entry;
  const { Content } = await entry.render();
  return renderTemplate`${renderComponent($$result, "PostLayout", $$Post, { "meta": { id, collection, slug }, "content": data }, { "default": ($$result2) => renderTemplate` ${renderComponent($$result2, "Content", Content, { "components": {
    code: $$Code
  } })} ` })}`;
}, "/Users/thor3/Documents/kill-me-ink/src/pages/blog/[slug].astro", void 0);

const $$file = "/Users/thor3/Documents/kill-me-ink/src/pages/blog/[slug].astro";
const $$url = "/blog/[slug]";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    default: $$slug,
    file: $$file,
    getStaticPaths,
    prerender,
    url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
